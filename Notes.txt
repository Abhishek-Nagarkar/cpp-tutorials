Pass by Value and Return by Value ==> New variable is created which is 
cheap to copy if it is of primitive type (expensive for class type)

Eg. std::string returnByValue();
expensive since copy of string will be created and returned to the caller

To resolve this issue : Pass by (const) reference or pass by address

Keep in mind -> when returning by reference make sure the object is not bound 
to function scope

========================================================================
The object being returned by reference must exist after the function returns

To return by reference use const static (if needed)

If rtr is non-static then program behaviour may be undefined 

eg. 
const std::string& getStringValue(){
    const static std::string str { "Hello" };
    return str;
}

int main(){
    std::cout << getStringValue() << std::endl;
    return 0;
}

ABOVE PROGRAM WILL WORK OKAY

eg.
const std::string& getStringValue(){
    const std::string str { "Hello" };
    return str;
}

int main(){
    std::cout << getStringValue() << std::endl;
    return 0;
}

ABOVE PROGRAM WILL HAVE UNDEFINED BEHAVIOUR
Since str is local to the function, it is 
destroyed before it can be returned thus the reference returned is DANGLING

If a function returns by reference and the caller is of non-reference type then a copy is created
eg. 
const int& getInt(){
    static int n = 10;
    return n;
}

int main(){
    const int& id1 = getInt(); // no copy is created
    int id2 = getInt(); // copy is created
}

==========================================

Best practice

Avoid returning references to non-const local static variables.

Returning a const reference to a const local static variable is sometimes 
done if the local variable being returned by reference is expensive to create 
and/or initialize (so we donâ€™t have to recreate the variable every function call).
 But this is rare.

Returning a const reference to a const global variable is also sometimes 
done as a way to encapsulate access to a global variable.